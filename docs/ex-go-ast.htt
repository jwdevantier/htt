% @code
local C = require "//common.htt"
local T = require "tags"
local code = T.code

local ast1 = "//examples/ast/ast1.htt"
% @end


% @component aboutLuaTables
<p>The final indentation of any given line is the sum of:
Lua tables are a hybrid data-structure which can work both as an list and a map. However, map entries are unordered, which isn't desirable when generating code. Hence I often define a (list-like) table of (associative) tables elements.
~></p>
% @end

% @component main
<p class="mb-2">
This example implements some of the AST nodes from the book, {{T.a("https://interpreterbook.com/", "Writing an Interpreter in Go")}}, specifically as implemented in {{T.a("https://github.com/kitasuke/monkey-go/blob/e1716fdf2e445456116fc844023a685521202f91/ast/ast.go", "this git repository")}}.
~></p>

<p class="mb-2">
You will see nodes generally come in two types, {{code "Statement"}} and {{code "Expression"}}, implementing the empty method of either to mark the type of node.
Beyond this, nodes implement {{code "String"}} and {{code "TokenLiteral"}}, and sometimes these are implemented in the same way.
~></p>


{{T.h2 "Getting Started"}}
<p class="mb-2">
We start by creating a template file, {{code "ast.htt"}} and defining the package, implementing the base types and so on. All of this is regular Go code:
~></p>

{{@ C.compSrc {file = ast1, component = "main", include_directives = true} }}

Rendering this essentially produces the same output:
{{@ C.eval {file = "//examples/ast/ast1.htt", component = "main"}}}

{{T.h2 "Rendering Nodes"}}
<p class="mb-2">
Now let's start rendering nodes.
~></p>

{{T.h3 "Defining the model"}}
<p class="mb-2">
To start, let's define some data describing the nodes we want. When speaking of code generation, the data we are generating code from is often called the {{T.i "model"}}. For larger projects, I would store the model in a separate file. That way, template files could refer to it.
~></p>

<p class="mb-2">
For small, self-contained projects, we can embed the model with the template. When compiling a template file ({{code "ast.htt"}}), HTT will look for a corresponding Lua file ({{code "ast.htt.lua"}}) matching the name of the template file, with the prefix {{code ".lua"}}.
~></p>

<p class="mb-2">
Hence, here is the {{code "ast.htt.lua"}} file to accompany our {{code "ast.htt"}} template file:
{{@ C.include {file = "examples/ast/ast2.htt.lua"} }}
~></p>

<p class="mb-2">
The code in {{code "ast.htt.lua"}} is, as the name implies, regular Lua code. The function {{code "nodes"}} returns a list (table) of (associative) tables, each describing a type of AST node. I like to wrap the data in a function to ensure I cannot modify global state and impact other rendering code.
~></p>

{{T.h3 "Defining how to render a node"}}
<p class="mb-2">
To use this data, let's define a component, {{code "node"}}, and just render out the name of the component for now:
~></p>
{{@ C.compSrc {file = "//examples/ast/ast2.htt", component = "node", include_directives = true} }}

{{T.h3 "Defining how to render all nodes"}}
To render all nodes, we define a component {{code "render_nodes"}}, which loops over each entry in the model (the {{code "nodes"}} function in {{code "ast.htt.lua"}}) and renders it:

{{@ C.compSrc {file = "//examples/ast/ast2.htt", component = "render_nodes", include_directives = true} }}

<p class="mb-2">
You could add these lines directly to {{code "main"}}. I normally would. But this way I can show you changes to this component in isolation.
~></p>

{{T.h3 "Putting it all together"}}

<p class="mb-2">
Finally, we call {{code "render_nodes"}} from our {{code "main"}} component. Since we have no data to pass to {{code "render_nodes"}}, we pass an empty Lua table ({{code "{}"}}).

Our main component, thus becomes:

~></p>
{{@ C.compSrc {file = "//examples/ast/ast2.htt", component = "main", include_directives = true} }}

{{T.h4 "Output"}}
{{@ C.eval {file = "//examples/ast/ast2.htt", component = "main"}}}

Success! We see the names of the nodes we defined in our model below the Go code we started out with. Now we can start defining in earnest how the AST nodes are to be rendered.

{{T.h2 "Rendering the Node struct"}}
Let's start by rendering the struct for east AST node:

{{@ C.compSrc {file = "//examples/ast/ast3.htt", component = "node", include_directives = true} }}

The nodes now render as:
{{@ C.eval {file = "//examples/ast/ast3.htt", component = "render_nodes_nospace"}}}

Before moving on, let's add some whitespace between components. You can do this in multiple ways, but inserting an empty line ahead of rendering each component in loop body of {{code "render_nodes"}} works well:
{{@ C.compSrc {file = "//examples/ast/ast3.htt", component = "render_nodes", include_directives = true} }}

Now we get:
{{@ C.eval {file = "//examples/ast/ast3.htt", component = "render_nodes"}}}

{{T.h2 "Implementing the node interface"}}
For now, we only handle nodes whose {{code "String"}} and {{code "TokenLiteral"}} implementations both return the value of {{code "<node>.Token.Literal"}}. 
Beyond that, we must implement either the empty function {{code "expressionNode()"}} or {{code "statementNode()"}}, depending on the type of node, as identified by the {{code "is_expr"}} field for the node in our model:

{{@ C.compSrc {file = "//examples/ast/ast4.htt", component = "node", include_directives = true} }}

Now, the code for the nodes themselves becomes:
{{@ C.eval {file = "//examples/ast/ast4.htt", component = "render_nodes"}}}

{{T.h2 "Overriding the String method"}}
<p class="mb-2">
Some nodes implement a custom {{code "String()"}} method to stringify themselves and their contents.
To support this, let us extend the model such that each node can define a {{code "string_fn"}} attribute, pointing to a component which implements the {{code "String()"}} method.
~></p>

{{T.h3 "Referencing components from the model."}}
<p class="mb-2">
Recall that we defined our components in the template {{code "ast.htt"}} and put our accompanying model in {{code "ast.htt.lua"}}, and that it is these two files combined which will 
~></p>

<p class="mb-2">
To support this, we need a way to reference the components to use for implementing the {{code "String()"}} method. One way to solve this is to send along a reference to the module generated from the template file itself.
~></p>

<p class="mb-2">
All templates can use the variable {{code "M"}} to refer to their own modules. So we can just send this along to the {{code "nodes()"}} function which returns the model:
~></p>

{{@ C.compSrc {file = "//examples/ast/ast5.htt", component = "render_nodes", include_directives = true} }}


<p class="mb-2">
From the model function, we can now refer to components in the template by their name. So {{code "m.node"}} would refer to the {{code "node"}} component defined in {{code "ast.htt"}}
~></p>

{{@ C.include {file = "examples/ast/ex.nodes.arg.htt.lua"} }}

<p class="mb-2">
With this change, we update the model, expanding the number of nodes we implement. Some, like the {{code "ReturnStatement"}} node, will now use a custom component (here: {{code "return_statement_string"}}) to implement the body of their {{code "String()"}} method.
~></p>
{{@ C.include {file = "examples/ast/ast5.htt.lua"} }}

{{T.h3 "Composing components"}}
<p class="mb-2">
The key change in the template is how we implement {{code "node"}} Notice now that we check if {{code "ctx.string_fn"}} is defined, and if so, renders that component:
~></p>

{{@ C.compSrc {file = "//examples/ast/ast5.htt", component = "node", include_directives = true} }}

<p class="mb-2">
This demonstrates how HTT components can be passed as arguments to other components which can render them. Also notice that since all compontents take exactly one table argument, we can pass all arguments along by passing {{code "ctx"}}.
These two facts combine to make components very composable.
~></p>

{{T.h3 "Implementing the custom String() methods"}}
<p class="mb-2">
The final change to the {{code "ast.htt"}} template file is implementing the components for the custom {{code "String()"}} methods.
~></p>

<p class="mb-2">
There is nothing to these components aside from noting that since we passed the entire {{code "ctx"}} from the {{code "node"}} component along to these, we still have access to attributes like {{code "short"}} from the model describing the node.
~></p>

{{@ C.compSrc {file = "//examples/ast/ast5.htt", component = "return_statement_string", include_directives = true} }}

{{@ C.compSrc {file = "//examples/ast/ast5.htt", component = "expr_statement_string", include_directives = true} }}

{{@ C.compSrc {file = "//examples/ast/ast5.htt", component = "prefix_expr_string", include_directives = true} }}



{{T.h4 "Output"}}
{{@ C.eval {file = "//examples/ast/ast5.htt", component = "render_nodes"}}}

{{T.h2 "Homework: refactoring" }}
<p class="mb-2">
I wanted to implement this piece-meal, with you looking on, to get a sense of the process rather than just seeing the finished thing. 
As a next step, I would refactor the model out into its own file, {{code "ast_model.lua"}}. If we did this, we would not have to pass the model (self) reference ({{code "M"}}) from the template to the {{code "nodes()"}} model function in {{code "ast.htt.lua"}}.
~></p>
<p class="mb-2">
To achieve this, we would:
<ol class="list-decimal list-inside">
  <li>move the model code from {{code "ast.htt.lua"}} to {{code "ast_model.lua"}}</li>
  <li>in {{code "ast.htt"}}, import the module by adding {{code [[% local model = require 'ast_model']]}} to the top of the file</li>
  <li>in {{code "ast.htt"}}, change the call to {{code "nodes(M)"}} to {{code "model.nodes()"}}</li>
  <li>in {{code "ast_model.lua"}}, import the template module by adding {{code "local tpl = require '//ast.htt'"}} to the top of the file.</li>
  <li>in {{code "ast_model.lua"}}, change all references to the model {{code "m.component"}} to {{code "tpl.component"}}.</li>
</ol>
~></p>
% @end