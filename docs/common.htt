%local sitename = "HTT Documentation"
%local conf = require("conf")

% @component xref
% local page = conf.ref2page[ctx.ref]
% if page then
% local url = page.slug .. (ctx.bookmark and ("#" .. ctx.bookmark) or "")
<a href="{{ url }}" class="text-blue-600">{{ ctx.txt or page.title}}</a>
% else
<a href="#" class="text-red-600">{{ ctx.txt or ctx.ref or "invalid link"}}</a>
% end
% @end

% @component codebox
% @code
local style = ""
if ctx.highlight then
    -- background here must match style chosen in docs/highlighter.js
    --   * change theme
    --   * re-render, inspect code box/shiki node for background value
    --   * update colorReplacements entry that one entry is the default theme BG
    --     OR remove if you are happy with the default BG
    --   * update background color here to match theme bg
    style = [[style="background-color:rgb(245 245 244 / var(--tw-bg-opacity));color:#657B83" class="]]
else
    style = [[class="bg-stone-100 ]]
end
style = style .. [[p-4 rounded-md"]]
% @end
% -- render a nice box for the code
<div class="code-container relative my-4">
    <div class="bg-stone-100 p-4 rounded-md">
        <div class="overflow-x-auto">
<pre class="code-block text-sm"><code class="text-gray-800">{{@ ctx.c ctx.c_args }}</code></pre>
        </div>
    </div>
</div>
% @end

% @component text
{{ ctx.text }}
% @end

% @component run_htt
% @code
-- Validate input
if not ctx.script then
    error("must provide script to run")
end

-- Create a temporary file for output capture
local tmp_output = os.tmpname()

-- Build the command
local cmd = string.format("%s %s > %s 2>&1",
    htt.env.htt_path(),
    ctx.script,
    tmp_output)

-- Run HTT
local exit_code = os.execute(cmd)

-- Read the output
local f = io.open(tmp_output, "r")
local output = f:read("*all")
f:close()

-- Clean up
os.remove(tmp_output)
% @end
{{@ codebox {c = text, c_args = {text = output} } }}
% @end

% -- include contents of a file as a text/code box
% @component include
% local content
% local file = io.open(ctx.file, "r")
% if file then
% -- this actually circumvents the indentation provided by htt
% -- this is a rare case of actually wanting that
{{@ codebox {c = text, c_args = {text = file:read("*all")} } }}
% file:close()
% end
% @end

% -- produce a code box listing the contents of a particular component
% @component compSrc
% @code
local fpath = ctx.file:sub(1,2) == "//" and ctx.file:sub(3) or ctx.file
local include_directives
if ctx.include_directives ~= nil then
    include_directives = ctx.include_directives ~= false
else
    include_directives = false
end
% @end
% local content = extract_component_source(fpath, ctx.component, include_directives)
% -- this actually circumvents the indentation provided by htt
% -- this is a rare case of actually wanting that
{{@ codebox {c = text, c_args = {text = content} } }}
% @end

% -- evaluate component with args, show output as text/code box
% @component eval
% local m = require(ctx.file)
% local component_name = ctx.component or "main"
{{@ codebox {c = m[component_name], c_args = ctx.ctx or {} } }}
% @end

% @component textbox
{{@ codebox {c = text, c_args = {text = ctx.text} } }}
% @end

% @component bNote
<div class="text-sm my-4 bg-stone-100 border-l-4 border-stone-400 text-stone-900 px-4 py-3" role="alert">
  <div class="flex">
    <div class="py-1"><svg class="fill-current h-6 w-6 text-stone-400 mr-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">{{ctx.icon}}</svg></div>
    <div>
    % if ctx.title then
      <p class="font-bold text-stone-500">{{ctx.title}}</p>
    % end
    <span>{{@ ctx.c ctx.ctx}}</span>
    </div>
  </div>
</div>
% @end

% @component note
% @code
local args = {
    -- circle with an 'i'
    icon = [[<path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z"/>]],
    title = ctx.title,
    c = ctx.c,
    ctx = ctx.ctx
}
% @end
{{@ bNote args }}
% @end

% @component warn
% @code
local args = {
    -- circle with an 'i'
    icon = [[<path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>]],
    title = ctx.title,
    c = ctx.c,
    ctx = ctx.ctx
}
% @end
{{@ bNote args }}
% @end

% @component menuSection
% local section = ctx.section
<li>
    <div @click="openSections.includes('{{ section.title }}') ? openSections = openSections.filter(i => i !== '{{ section.title }}') : openSections.push('{{ section.title }}')"
            class="pl-2 flex justify-between items-center cursor-pointer text-blue-600 hover:bg-gray-200 py-2">
        <span>{{ section.title }}</span>
        <svg x-show="!openSections.includes('{{ section.title }}')" class="w-4 h-4 text-gray-500 mr-2" viewBox="0 0 24 24">
            <path fill="currentColor" d="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z" />
        </svg>
        <svg x-show="openSections.includes('{{ section.title }}')" class="w-4 h-4 text-gray-500 mr-2" viewBox="0 0 24 24">
            <path fill="currentColor" d="M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z" />
        </svg>
    </div>
    <ul x-show="openSections.includes('{{ section.title }}')" class="ml-2">
        % for _, page in ipairs(section.pages) do
        % local x = page.refid == ctx.page.refid and " font-bold" or ""
        % print("page(" .. page.refid .. "), ctx.page(".. ctx.page.refid .. ") ->" .. tostring(x))
        <li class="hover:bg-gray-200 pl-2"><a href="{{ page.slug }}" class="text-gray-500 block w-full h-full py-2{{x}}">{{ page.title }}</a></li>
        % end
    </ul>
</li>
% @end

% @component menu
% for _, entry in pairs(conf.site) do
    % if conf.is_section(entry) then
{{@ menuSection { section = entry, page = ctx.page } }}
    % elseif conf.is_page(entry) then
    % local x = entry.refid == ctx.page.refid and " font-bold" or ""
    % print("entry(" .. entry.refid .. "), ctx.page(".. ctx.page.refid .. ") ->" .. tostring(x))
<li class="hover:bg-gray-200"><a href="{{ entry.slug }}" class="pl-2 text-blue-600 block w-full h-full py-2{{x}}">{{ entry.title }}</a></li>
    % end -- if
% end -- for
% @end

% @component base
% local section = conf.ref2section[ctx.page.refid]
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{sitename}}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js" defer></script>
    <style>
        html, body { height: 100%; }
    </style>
</head>
<body class="bg-white flex flex-col h-full" x-data="initState()">
    <!-- Mobile top bar -->
    <div class="md:hidden fixed top-0 left-0 right-0 bg-white border-b border-gray-300 shadow-md shadow-gray-300/50 z-50">
        <div class="flex justify-between items-center p-4">
            <button @click="mobileMenuOpen = !mobileMenuOpen" class="text-gray-500">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                </svg>
            </button>
            <h1 class="text-lg font-semibold">{{sitename}}</h1>
        </div>
    </div>

    <!-- Mobile menu overlay -->
    <div x-show="mobileMenuOpen" class="fixed inset-0 bg-black bg-opacity-30 z-40 md:hidden" @click="mobileMenuOpen = false"></div>

    <div class="flex flex-1 overflow-hidden">
        <!-- Sidebar (desktop) / Mobile menu -->
        <div :class="{'fixed inset-y-0 left-0 transform translate-x-0 z-50': mobileMenuOpen, 'fixed inset-y-0 left-0 transform -translate-x-full z-50': !mobileMenuOpen, 'md:relative md:translate-x-0': true}"
             class="bg-gray-100 w-64 flex-shrink-0 border-r border-gray-200 transition-transform duration-300 ease-in-out overflow-y-auto h-full">
            <div class="pl-4">
                <nav class="text-sm">
                    <ul>
                        {{@ menu { page = ctx.page } }}
                    </ul>
                </nav>
            </div>
        </div>

        <!-- Main Content -->
        <div class="flex-1 overflow-y-auto p-4 md:p-10 mt-16 md:mt-0">
            <div class="max-w-2xl mx-auto">
            <h1 class="text-3xl font-bold mb-5">{{ctx.title}}</h1>
            {{@ ctx.content ctx.ctx }}
            </div>
        </div>
    </div>
    <script>
        function initState() {
            return {
                mobileMenuOpen: false,
                openSections: [
                % -- load page with parent section initially expanded
                % if section then
                ~>'{{section.title}}'
                % end
                ~>]
            }
        }

document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('pre.code-block code').forEach((codeBlock) => {
    let lines = codeBlock.innerHTML.split('\n');
    
    // Find the minimum non-zero indentation, ignoring the first line
    const minIndent = lines.slice(1).reduce((min, line) => {
      const indent = line.match(/^\s*/)[0].length;
      return (line.trim().length && indent < min) ? indent : min;
    }, Infinity);
    
    // Process lines: keep first line as is, remove minIndent from others
    const processedLines = [
      lines[0],
      ...lines.slice(1).map(line => {
        const currentIndent = line.match(/^\s*/)[0].length;
        return line.slice(Math.min(currentIndent, minIndent));
      })
    ];
    
    codeBlock.innerHTML = processedLines.join('\n');
  });
});
    </script>
</body>
</html>
% @end
